import numpy as np
from PIL import Image, ImageDraw

#---initial condition ---
theta_init=np.pi/3
theta_d_init=0
dt=0.0005
n_iter=30000



def draw_pendulum(theta,w=200,h=200,m=1,l=1):
	#create image with width=w and height=h
	img = Image.new("RGB", (w, h), "white")
	#convert the length of the pendulum to some image units
	L=int(0.4*h*l)
	#define a diameter for the pendulums mass
	d=int(0.02*h)m*(1/3)
	#create the draw objects of the image
	draw = ImageDraw.Draw(img)
	#calculate the cartesian coordinates
	x0=int(w/2)
	y0=int(h/2)
	x=x0+L*np.sin(theta)
	y=y0+L*np.cos(theta)
	#draw the pendulum
	draw.line([(x0,y0),(x,y)],fill=(0,0,0),width=1)
	draw.ellipse([(x-d,y-d),(x+d,y+d)], fill=(0,0,255), outline=None)
	return img


def get_energy(theta,theta_d,m=1,l=1,g=10):
	#the height of the mass
	y=l*np.cos(theta)
	#potential energy
	e_pot=-m*g*y
	#kinetic energy
	e_kin=m/2*(l*theta_d)**2
	return e_pot,e_kin

def calculate_trajectory(theta_init,theta_d_init,n_iter=1000,dt=0.01,g=10,l=1):
	phase_traject=np.zeros((n_iter,2))#phase-space trajectory
	phase_traject[0,:]=np.array([theta_init,theta_d_init])

	for i in range(n_iter-1):
		theta_dd=-g/l*np.sin(phase_traject[i,0])
		phase_traject[i+1,1]=phase_traject[i,1]+dt*theta_dd
		phase_traject[i+1,0]=phase_traject[i,0]+dt*phase_traject[i,1]
	return phase_traject

frames_per_second=20
take_frame_every= (1/(dt*frames_per_second))

phase_traject=calculate_trajectory(theta_init,theta_d_init,dt=dt,n_iter=n_iter)
total_energy=[]
for i in range(phase_traject.shape[0]):
	e_pot,e_kin=get_energy(phase_traject[i,0],phase_traject[i,1])
	total_energy.append(e_pot+e_kin)	



frames = []
def render_traject(phase_traject, m=1, l=1, g=9.8, save_path='', take_frame_every =1):
    
    for i in range(phase_traject.shape[0]):
        if i % take_frame_every == 0:
            theta=phase_traject[i,0]
            theta_d=phase_traject[i,1]
            
            img=draw_pendulum(theta,w=200,h=200,m=m,l=l)
            frames.append(img)
            name= r"/Users/ankit/Desktop/Simulation_" + str(i) + '.jpg'
            img.save(name,'JPEG')


	

	
render_traject(phase_traject,take_frame_every=take_frame_every)
